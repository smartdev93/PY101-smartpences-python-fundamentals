"""File: manyqueens.pyDetermine the solution to the Many Queens problem for a chessboardof any size.1) There is a single input indicating the size of the board.2) If there is a solution display it, else indicate that there is none."""from grid import Griddef main():    size = input("Enter the board size: ")    board = Grid(size, size, "-")    if not canPlaceQueen(0, board):        print "Impossible on a board of size " + \              str(size) + "x" + str(size)    else:        print "Solution:"        print boarddef canPlaceQueen(col, board):    """Mark with a Q the first unattacked location in column    col that permits a solution across the remaining columns.    Preconditions: 0 <= col < board.getWidth()    Postconditions: if an entry in col gets marked Q    return True else return False."""    # Iterate down the rows in this column    for row in xrange(board.getHeight()):                # if square is not under attack         if not attacked (row, col, board):             # if this is the last column             if col == board.getWidth() - 1:                # end recursion, set square to Q                # recursive ascent true                 board[row][col] = "Q"                      return True                            else:                 # trial solution, set square to Q                 board[row][col] = "Q"                  # if recursive descent succeeds             if canPlaceQueen(col + 1, board):                 # recursive ascent true                 return True                            else:                 # trial solution didn't work, so                 # reset square to -                 board[row][col] = "-"    # recursive ascent false    return False                           def attacked(row, col, board):    """Determine if the square at location (row, col)    is under attack from any queen in columns 0 to col - 1.    Preconditions: 0 <= row, col < board.getWidth()    Returns True if square under attack or False otherwise."""    # Look for horizontal attack    for j in xrange(col):        if board[row][j] == "Q":            return True    # Look for attack from a descending diagonal    i = row - 1    j = col - 1    k = 0    while k <= min(i, j):        if board[i][j] == "Q":            return True        else:            i -= 1            j -= 1            k += 1    # Look for attack from an ascending diagonal    i = row + 1    j = col - 1    k = 0    while k <= min(board.getHeight() - i - 1, j):        if board[i][j] == "Q":            return True        else:            i += 1            j -= 1            k += 1    return Falsemain()